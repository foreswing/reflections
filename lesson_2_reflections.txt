Lesson 2

What happens when you initialize a repository? Why do you need to do it?

	It creates the git metadata files and must be done to begin using git on the files in the new repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is where files from the working directory go temporarily until they're ready to be committed to the repository.  This allows you to logically package up all of the files into a single area until you're ready to commit them.

How can you use the staging area to make sure you have one commit per logical change?

	Do git adds as you modify files associated with the logical change but don't do the commit until you have finished modifying all files associated with the logical change.  You can do git diff to verify that you have changed everything you needed to since it compares the working directory with the staging area.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	When you are tracking a beta version separate from the working version or when you might want to create a proof of concept version but keep it separate from the working version.  You could keep versions of your files in separate branches while you're working on the "major" revisions.
	
How do the diagrams help you visualize the branch structure?

	They integrate the chronology of commits across the various branches so you can see what changes were made when and to which branch.  This allows you to know what changes are or aren't in a given branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The merge results in combining the code from the two branches into one new branch, typically the master branch.  The diagram shows the new commit for the merged branch as having two parents, one from each branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Git's auto-merging saves programmer time allowing simultaneous updating of files and will incorporate all changes from both branches into a new merged branch as long as there are no code conflicts.  The only downside is when there are conflicts, then the programmers have to collaborate to determine the final conflict resolution.  However, Git highlights the conflicts for them thus making this manual process easier than what it would be without Git.